name: Continuous Integration

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ master ]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  standards:
    # --------------------------------------------------------------------------
    # Perform all development-specific tools, including formatting, static code
    # analysis, style enforcement and documentation creation. Changes in the code
    # or in the documentation are also replicated in the repository.
    # --------------------------------------------------------------------------
    name: OS ${{ matrix.os }} - Python ${{ matrix.python-version }} - Development Standards
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      matrix:
        os: ["ubuntu-20.04"]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1  # no history, just HEAD
      - uses: docker-practice/actions-setup-docker@master
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dcr dependencies
        run: make pipenv-dev
      - name: Run isort for sorting your imports
        run: make isort
      - name: Run Black for formatting your code
        run: make black
      - name: Run Bandit for finding common security issues
        run: make bandit
      - name: Run Flake8 for style guide enforcement
        run: make flake8
      - name: Run MyPy for static typing
        run: make mypy
      - name: Run PyLint for checking for errors in Python code
        run: make pylint
      - name: Run pydocstyle for docstring style enforcement
        run: make pydocstyle
      - name: Run MkDocs for creating project documentation with markdown.
        run: make mkdocs
      - name: Create a PostgreSQL container
        run: |
            sudo bash -c 'echo "{ "cgroup-parent": "/actions_job","experimental":true}" > /etc/docker/daemon.json'
            sudo systemctl restart docker.service
            chmod +x ./scripts/run_setup_postgresql.sh
            ./scripts/run_setup_postgresql.sh test
      - name: Publish the code coverage to coveralls.io
        run: make coveralls

  development:
    # --------------------------------------------------------------------------
    # Install the development environment and run all tests based on pytest.
    # --------------------------------------------------------------------------
    name: OS ${{ matrix.os }} - Python ${{ matrix.python-version }} - Test Framework
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: ["ubuntu-18.04", "ubuntu-20.04", "windows-2019", "windows-2022"]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1  # no history, just HEAD
      - uses: docker-practice/actions-setup-docker@master
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dcr dependencies
        run: make pipenv-dev
      - name: Compile the Python code
        run: make compileall
      - name: Create a PostgreSQL container
        run: |
            sudo bash -c 'echo "{ "cgroup-parent": "/actions_job","experimental":true}" > /etc/docker/daemon.json'
            sudo systemctl restart docker.service
            chmod +x ./scripts/run_setup_postgresql.sh
            ./scripts/run_setup_postgresql.sh test
      - name: Run pytest for writing better program
        run: make pytest

  production:
    # --------------------------------------------------------------------------
    # Install the productive environment and run all tests based on pytest.
    # --------------------------------------------------------------------------
    name: OS ${{ matrix.os }} - Python ${{ matrix.python-version }} - Production
    runs-on: ${{ matrix.os }}
    #   env:
    strategy:
      max-parallel: 3
      matrix:
        os: ["ubuntu-18.04", "ubuntu-20.04", "windows-2019", "windows-2022"]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1  # no history, just HEAD
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dcr dependencies
        run: make pipenv-prod
      - name: Compile the Python code
        run: make compileall
      - name: Create a PostgreSQL container
        run: |
            sudo bash -c 'echo "{ "cgroup-parent": "/actions_job","experimental":true}" > /etc/docker/daemon.json'
            sudo systemctl restart docker.service
            chmod +x ./scripts/run_setup_postgresql.sh
            ./scripts/run_setup_postgresql.sh test
      - name: Run pytest for writing better program
        run: make pytest-ci
