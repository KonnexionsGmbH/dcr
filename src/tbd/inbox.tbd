    db.update_dbt_id(
        db.DBT_RUN,
        cfg.run_id,
        {
            db.DBC_INBOX_ABS_NAME: str(
                pathlib.Path(cfg.directory_inbox).absolute()
            ),
            db.DBC_INBOX_CONFIG: cfg.directory_inbox,
            db.DBC_INBOX_ACCEPTED_ABS_NAME: str(
                pathlib.Path(cfg.directory_inbox_accepted).absolute()
            ),
            db.DBC_INBOX_ACCEPTED_CONFIG: cfg.directory_inbox_accepted,
            db.DBC_INBOX_REJECTED_ABS_NAME: str(
                pathlib.Path(cfg.directory_inbox_rejected).absolute()
            ),
            db.DBC_INBOX_REJECTED_CONFIG: cfg.directory_inbox_rejected,
        },
    )






# -----------------------------------------------------------------------------
# Prepare a new pdf document for Tesseract OCR..
# -----------------------------------------------------------------------------
def prepare_pdf_for_tesseract() -> None:
    """Prepare a new pdf document for Tesseract OCR."""
    cfg.logger.debug(cfg.LOGGER_START)

    try:
        # wwe
        # print("wwe path=",cfg.config[cfg.DCR_CFG_DIRECTORY_INBOX_ACCEPTED])
        # with cfg.config[cfg.DCR_CFG_DIRECTORY_INBOX_ACCEPTED] as path:
        with tempfile.TemporaryDirectory() as path:
            images_from_path = convert_from_path(
                utils.get_file_name_inbox(), output_folder=path
            )

        import os
        import tempfile

        from pdf2image import convert_from_path

        filename = "target.pdf"

        with tempfile.TemporaryDirectory() as path:
            images_from_path = convert_from_path(
                filename, output_folder=path, last_page=1, first_page=0
            )

        base_filename = (
            os.path.splitext(os.path.basename(filename))[0] + ".jpg"
        )

        save_dir = "your_saved_dir"

        for page in images_from_path:
            page.save(os.path.join(save_dir, base_filename), "JPEG")

        db.update_document_status(
            cfg.JOURNAL_ACTION_11_004,
            inspect.stack()[0][3],
            __name__,
            cfg.STATUS_TESSERACT_READY,
        )
        cfg.total_ok_processed += 1
    except shutil.Error as err:
        cfg.total_erroneous += 1
        db.update_document_status(
            cfg.JOURNAL_ACTION_01_903.replace(
                "{source_file}", utils.get_file_name_inbox()
            )
            .replace("{error_code}", str(err.errno))
            .replace("{error_msg}", err.strerror),
            inspect.stack()[0][3],
            __name__,
            cfg.STATUS_PDF2IMAGE_ERROR,
        )

    cfg.logger.debug(cfg.LOGGER_END)




# -----------------------------------------------------------------------------
# Convert the new document to PDF format using Pandoc.
# -----------------------------------------------------------------------------
def process_inbox_pandoc() -> None:





    target_file_accepted = os.path.join(
        cfg.config[cfg.DCR_CFG_DIRECTORY_INBOX_ACCEPTED],
        cfg.document_stem_name + "_" + str(cfg.document_id) + "." + cfg.document_file_type,
    )
    target_file_rejected = os.path.join(
        cfg.config[cfg.DCR_CFG_DIRECTORY_INBOX_REJECTED],
        cfg.document_stem_name + "_" + str(cfg.document_id) + "." + cfg.document_file_type,
    )
    target_file_pdf = os.path.join(
        cfg.config[cfg.DCR_CFG_DIRECTORY_INBOX_ACCEPTED],
        cfg.document_stem_name + "_" + str(cfg.document_id) + "." + cfg.FILE_TYPE_PDF,
    )

    try:
        pypandoc.convert_file(
            source_file=cfg.source_file,
            to=cfg.FILE_TYPE_PDF,
            outputfile=target_file_pdf,
            extra_args=["--latex-engine=weasyprint"],
        )
    except (OSError, RuntimeError) as err:
        is_ok = False
        process_inbox_document_rejected(
            logger,
            "01.902 Issue when converting file "
            + cfg.source_file
            + " with Pandoc - error="
            + str(err.errno),
            cfg.STATUS_PANDOC_ERROR,
        )

    if is_ok:
        try:
            shutil.move(cfg.source_file, target_file_accepted)
        except (PermissionError, shutil.Error) as err:
            process_inbox_document_rejected(
                logger,
                "01.903 Issue when moving file "
                + cfg.source_file
                + " to "
                + target_file_rejected
                + " - error="
                + str(err.errno),
                cfg.STATUS_REJECTED_ERROR,
            )
