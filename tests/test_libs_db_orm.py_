# pylint: disable=unused-argument
"""Testing Module libs.db.orm."""

import libs.cfg
import libs.db.orm
import pytest
from sqlalchemy import Table
from sqlalchemy import delete

import dcr

# -----------------------------------------------------------------------------
# Constants & Globals.
# -----------------------------------------------------------------------------
# @pytest.mark.issue

TESTS_INBOX = "tests/__PYTEST_FILES__/"


# -----------------------------------------------------------------------------
# Test Database Version - Wrong version number in configuration.
# -----------------------------------------------------------------------------
def test_check_db_wrong_version():
    """Test: Wrong version number in configuration."""
    dcr.main([libs.cfg.DCR_ARGV_0, libs.cfg.RUN_ACTION_CREATE_DB])

    libs.cfg.config[libs.cfg.DCR_CFG_DCR_VERSION] = "0.0.0"

    with pytest.raises(SystemExit) as expt:
        libs.db.orm.check_db_up_to_date()

    assert expt.type == SystemExit
    assert expt.value.code == 1


# -----------------------------------------------------------------------------
# Test Database Version - No row in table version.
# -----------------------------------------------------------------------------
def test_select_version_unique_not_found():
    """Test: No row in table version."""
    dcr.main([libs.cfg.DCR_ARGV_0, libs.cfg.RUN_ACTION_CREATE_DB])

    libs.db.orm.connect_db()

    with libs.cfg.engine.begin() as conn:
        version = Table(
            libs.db.orm.DBT_VERSION,
            libs.cfg.metadata,
            autoload_with=libs.cfg.engine,
        )
        conn.execute(delete(version))

    with pytest.raises(SystemExit) as expt:
        libs.db.orm.select_version_version_unique()

    assert expt.type == SystemExit
    assert expt.value.code == 1

    libs.db.orm.disconnect_db()


# -----------------------------------------------------------------------------
# Test Database Version - More than one row in table version.
# -----------------------------------------------------------------------------
def test_select_version_unique_not_unique():
    """Test: More than one row in table version."""
    dcr.main([libs.cfg.DCR_ARGV_0, libs.cfg.RUN_ACTION_CREATE_DB])

    libs.db.orm.insert_dbt_row(libs.db.orm.DBT_VERSION, {libs.db.orm.DBC_VERSION: "0.0.0"})

    with pytest.raises(SystemExit) as expt:
        libs.db.orm.select_version_version_unique()

    assert expt.type == SystemExit
    assert expt.value.code == 1


# -----------------------------------------------------------------------------
# Test Database Upgrade - No database Docker container existing.
# -----------------------------------------------------------------------------
def test_upgrade_no_db_docker_container(fxtr_no_db_docker_container):
    """Test: No database Docker container existing."""
    fxtr_no_db_docker_container()

    with pytest.raises(SystemExit) as expt:
        dcr.main([libs.cfg.DCR_ARGV_0, libs.cfg.RUN_ACTION_UPGRADE_DB])

    assert expt.type == SystemExit
    assert expt.value.code == 1


# -----------------------------------------------------------------------------
# Test Database Upgrade - Database is up to date.
# -----------------------------------------------------------------------------
def test_upgrade_up_to_date_already(fxtr_no_db_docker_container):
    """Test: Database is up-to-date."""
    dcr.main([libs.cfg.DCR_ARGV_0, libs.cfg.RUN_ACTION_CREATE_DB])

    dcr.main([libs.cfg.DCR_ARGV_0, libs.cfg.RUN_ACTION_UPGRADE_DB])

    assert (
        libs.cfg.config[libs.cfg.DCR_CFG_DCR_VERSION] == libs.db.orm.select_version_version_unique()
    )
